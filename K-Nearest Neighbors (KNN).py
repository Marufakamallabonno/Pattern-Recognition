# -*- coding: utf-8 -*-
"""Pr_assm4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kr4-eEmpwxcfITRe7ykIG3aq-Kn6ylEz
"""

#1
import matplotlib.pyplot as plt
import numpy as np
train_data =np.loadtxt('/content/drive/MyDrive/4.2/pattern /lab5/train_knn.txt',delimiter=",",dtype='int32')
test_data =np.loadtxt('/content/drive/MyDrive/4.2/pattern /lab5/test_knn.txt',delimiter=",",dtype='int32')

print("Train data:\n",train_data);


train_data_c1=[];
train_data_c2=[];
for item in train_data:
    if item[2]==1:
        #print(item[2]);
        train_data_c1.append(item)
    elif item[2]==2:
        train_data_c2.append(item)
train_data_class1= np.array(train_data_c1);
train_data_class2= np.array(train_data_c2);

x1,y1= train_data_class1[:,0],train_data_class1[:,1];
x2,y2= train_data_class2[:,0],train_data_class2[:,1];
print("x1",x1);
print("x2",x2);
fig=plt.figure(1, figsize=(10,8))
chart1= fig.add_subplot()
chart1.scatter(x1,y1,marker='o',color='r',label='Train class 1');
chart1.scatter(x2,y2,marker='*',color='k',label='Train class 2');

chart1.axis([-4,8,-5,20]);
chart1.legend()#
plt.savefig('TrainClass.png')

print("Test data:\n",test_data);

from math import sqrt
def euclidean_distance(x,y):
  euc_dis=sqrt(pow((x[0]-y[0]),2)+pow((x[1]-y[1]),2))
  return euc_dis

print(euclidean_distance(test_data[0],test_data[1]))

'''KNN ALGORITHM'''
predicted=[]
out=open('prediction.txt','w')
def KNN(k,test_xy):
    ranked_data=[]
    c1=0
    c2=0    
    print("Test Point ",test_xy[0],test_xy[1],end="\n")
    out.write("Test Point:{},{}\n".format(test_xy[0],test_xy[1]))

    for val in train_data:
        dis=euclidean_distance(point,val)
        ranked_data.append((dis,val[2]))
        #print(ranked_data)
    ranked_data.sort(key=lambda x:x[0])
    for i in range(k):
        print("Distance ",i+1,": ","{:.2f}".format(ranked_data[i][0]),"\tclass:","{:.2f}".format(ranked_data[i][1]),end="\n")
        out.write("Distance "+str(i+1)+": "+"{:.2f}".format(ranked_data[i][0])+"   class:"+"{:.2f}".format(ranked_data[i][1])+"\n")
    for i in range(k):        
        if(ranked_data[i][1]==1):
            c1+=1
        else:
            c2+=1   
    if(c1>=c2):
        print("Predicted Class ","{:.2f}".format(1),end="\n")
        out.write("Predicted Class "+"{:.2f}".format(1)+"\n")    
        predicted.append(1)
    else:
        print("Predicted Class ","{:.2f}".format(2),end="\n")
        out.write("Predicted Class "+"{:.2f}".format(2)+"\n")
        predicted.append(2)
    out.write("\n")

K=int(input('Enter K value:'))  
for point in test_data:
    KNN(K,point)
out.close()

print("Predicted classes: ",predicted) 
test_data_c1=[];
test_data_c2=[];
i=0
for item in test_data:
    if predicted[i]==1:
        #print(item[2]);
        test_data_c1.append(item)
    elif predicted[i]==2:
        test_data_c2.append(item)
    i=i+1
test_data_class1= np.array(test_data_c1);
test_data_class2= np.array(test_data_c2);

x_test_1,y_test_1= test_data_class1[:,0],test_data_class1[:,1];
x_test_2,y_test_2= test_data_class2[:,0],test_data_class2[:,1];
print("x1",x_test_1);
print("x2",x_test_2);
fig=plt.figure(1, figsize=(10,8))
chart1= fig.add_subplot()
chart1.scatter(x_test_1,y_test_1,marker='o',color='r',label='Test class 1');
chart1.scatter(x_test_2,y_test_2,marker='*',color='k',label='Test class 2');

chart1.axis([-4,10,-5,20]);
chart1.legend()#
plt.savefig('TestClass.png')

print("file content")
with open('/content/prediction.txt', 'r') as f:
    print(f.read())